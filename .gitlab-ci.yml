stages:
  - build
  - test
  - deploy

build:
  stage: build
  image: docker
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE

test:
  stage: test
  image: node:18
  before_script:
    - cd server
    - npm ci
    - cd ../client
    - npm ci
  script:
    - cd ../server
    - npm test
    - cd ../client
    - npm test

deploy-job:
  stage: deploy
  image: amazon/aws-cli:latest
  script:
    - aws ecs describe-task-definition --task-definition $CI_AWS_ECS_TASK_DEFINITION --region ap-south-1 > input.json
    - jq '.containerDefinitions[].image="'$CI_REGISTRY_IMAGE':'$CI_COMMIT_SHORT_SHA'"' input.json |
         jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities)' > modified.json
    - aws ecs register-task-definition --cli-input-json file://modified.json --region ap-south-1
    - revision=$(aws ecs describe-task-definition --task-definition $CI_AWS_ECS_TASK_DEFINITION --region ap-south-1 | jq -r '.taskDefinition.revision')
    - aws ecs update-service --cluster $CI_AWS_ECS_CLUSTER --service $CI_AWS_ECS_SERVICE --task-definition $CI_AWS_ECS_TASK_DEFINITION:$revision --region ap-south-1

